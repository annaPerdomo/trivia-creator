datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TriviaGame {
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  host         User        @relation(fields: [hostId], references: [id])
  hostId       Int
  id           Int         @default(autoincrement()) @id
  joinCode     String?      @unique
  playedAt     DateTime?   @map(name: "played_at")
  questions    Question[]
  roundAmount  Int?
}

model Question {
  answers        Answer[]
  content        String?
  correctAnswer  String?
  id             Int        @default(autoincrement()) @id
  questionNum    Int?
  roundNum       Int
  trivia         TriviaGame   @relation(fields: [triviaId], references: [id])
  triviaId       Int
  type           String?
}

model Answer {
  content       String?
  id            Int         @default(autoincrement()) @id
  isCorrect     Boolean     @default(false)
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    Int
  submittedAt   DateTime    @default(now())
  team          Team        @relation(fields: [teamId], references: [id])
  teamId        Int
}

model Team {
  answers       Answer[]
  id            Int         @default(autoincrement()) @id
  members       User[]
  teamName      String?
  @@map(name: "teams")
}


model User {
  createdAt     DateTime?    @default(now()) @map(name: "created_at")
  displayName   String?
  email         String?     @unique
  emailVerified DateTime? @map(name: "email_verified")
  hostedTriviaGames   TriviaGame[]
  id            Int         @default(autoincrement()) @id
  image         String?
  name          String?
  teams         Team[]
  updatedAt     DateTime?   @updatedAt @map(name: "updated_at")
  @@map(name: "users")
}

model Account {
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  compoundId         String    @unique @map(name: "compound_id")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  id                 Int       @default(autoincrement()) @id
  providerAccountId  String    @map(name: "provider_account_id")
  providerId         String    @map(name: "provider_id")
  providerType       String    @map(name: "provider_type")
  refreshToken       String?   @map(name: "refresh_token")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")
  userId             Int       @map(name: "user_id")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  expires      DateTime
  id           Int      @default(autoincrement()) @id
  sessionToken String   @unique @map(name: "session_token")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  userId       Int      @map(name: "user_id")

  @@map(name: "sessions")
}

model VerificationRequest {
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  expires    DateTime
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}